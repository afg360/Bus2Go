plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-android'
    id 'kotlin-parcelize'
    id 'kotlin-kapt'
    id 'com.google.devtools.ksp' //we can use with Room
    id 'org.jetbrains.kotlin.plugin.serialization'
}

android {
    namespace 'dev.mainhq.bus2go'
    compileSdk 34
    
    defaultConfig {
        applicationId "dev.mainhq.bus2go"
        minSdk 26
        targetSdk 34
        versionCode 4
        versionName "1.3.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    
    flavorDimensions += [ "dbPackaging" ]
    productFlavors {
        liteDb {
            isDefault true
            dimension "dbPackaging"
            applicationIdSuffix ".lite"
        }
        bundledDb {
            dimension "dbPackaging"
            applicationIdSuffix ".bundled"
        }
    }
    
    sourceSets {
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
    }
    
    //include properties defined locally
    def localProperties = new Properties()
    localProperties.load(new FileInputStream(rootProject.file("local.properties")))
    
    buildTypes {
        debug {
            isDefault true
            debuggable true
            minifyEnabled false
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
            android.buildFeatures.buildConfig true
            buildConfigField "String", "LOCAL_HOST", "\"${localProperties.getProperty('LOCAL_HOST', '127.0.0.1')}\""
            buildConfigField "int", "DEFAULT_PORT", "${localProperties.getProperty('DEFAULT_PORT', '8000')}"
        }
        
        alpha {
            minifyEnabled true
            applicationIdSuffix ".alpha"
            versionNameSuffix "-alpha"
        }
        
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    buildFeatures {
        viewBinding true
    }
}


dependencies {
    implementation 'androidx.media3:media3-test-utils:1.4.0'
    implementation 'androidx.media3:media3-common:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

    def fragment_version = "1.6.2"
    // Java language implementation
    //noinspection GradleDependency
    implementation "androidx.fragment:fragment-ktx:$fragment_version"
    implementation "androidx.core:core-ktx:1.13.1"
    
    def kotlin_coroutines_version = "1.7.3"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlin_coroutines_version"

    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'com.google.android.material:material:1.12.0'
    implementation "androidx.core:core-splashscreen:1.0.1"

    //Preference manager
    implementation "androidx.preference:preference-ktx:1.2.1"
    
    //WorkManager
    def work_version = "2.9.1"
    implementation "androidx.work:work-runtime-ktx:$work_version"
    
    //runtimeOnly 'io.mockk:mockk-android:1.13.17'
    
    def data_store_version = "1.1.1"
    //DataStore
    implementation "androidx.datastore:datastore-preferences:$data_store_version"
    //proto datastore
    implementation "androidx.datastore:datastore:$data_store_version"

    //kotlin serializable
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.3"
    implementation "org.jetbrains.kotlinx:kotlinx-collections-immutable:0.3.5"


    def room_version = "2.6.1"
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-testing:$room_version"

    // To use Kotlin annotation processing tool (kapt)
    ksp "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-ktx:$room_version"

    /* WebRequest apis */
    // Ktor Core
    def ktor_version = "2.0.3"
    implementation "io.ktor:ktor-client-core:$ktor_version"
    implementation "io.ktor:ktor-client-core-jvm:$ktor_version"
    implementation "io.ktor:ktor-client-websockets:$ktor_version"

    // Ktor HTTP client dependencies
    implementation "io.ktor:ktor-client-okhttp:$ktor_version"
    implementation "io.ktor:ktor-client-cio:$ktor_version"
    
    def mockWebServer_version = "1.2.1"
    //Unit Testing
    testImplementation 'junit:junit:4.13.2'
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$kotlin_coroutines_version"
    testImplementation "org.assertj:assertj-core:3.24.2"
    testImplementation "androidx.test:core:1.6.1"
    testImplementation "androidx.arch.core:core-testing:2.2.0"
    testImplementation "androidx.room:room-testing:$room_version"
    testImplementation "androidx.work:work-testing:$work_version"
    testImplementation "com.squareup.okhttp:mockwebserver:$mockWebServer_version"
    
    //Instrumentation Testing
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'
    androidTestImplementation "androidx.work:work-testing:$work_version"
    androidTestImplementation "com.squareup.okhttp:mockwebserver:$mockWebServer_version"
}
